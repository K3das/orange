// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0

package db

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type TranscriptionStatus string

const (
	TranscriptionStatusStarted TranscriptionStatus = "started"
	TranscriptionStatusDone    TranscriptionStatus = "done"
	TranscriptionStatusFailed  TranscriptionStatus = "failed"
)

func (e *TranscriptionStatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = TranscriptionStatus(s)
	case string:
		*e = TranscriptionStatus(s)
	default:
		return fmt.Errorf("unsupported scan type for TranscriptionStatus: %T", src)
	}
	return nil
}

type NullTranscriptionStatus struct {
	TranscriptionStatus TranscriptionStatus
	Valid               bool // Valid is true if TranscriptionStatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullTranscriptionStatus) Scan(value interface{}) error {
	if value == nil {
		ns.TranscriptionStatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.TranscriptionStatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullTranscriptionStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.TranscriptionStatus), nil
}

type AsrTranscription struct {
	GuildID                     string
	ChannelID                   string
	OriginalMessageID           string
	OriginalMessageDeleted      bool
	OriginalMessageTimestamp    pgtype.Timestamptz
	ResponseMessageID           string
	ResponseDeleted             bool
	TranscriptionStatus         NullTranscriptionStatus
	VoiceMessageAudioDuration   pgtype.Float8
	TranscriptionModel          pgtype.Text
	TranscriptionProcessingTime pgtype.Float8
}

type User struct {
	ID                  string
	AsrEnabled          bool
	AsrEnabledTouchedAt pgtype.Timestamptz
	AsrNudged           bool
	AsrNudgedTouchedAt  pgtype.Timestamptz
}
